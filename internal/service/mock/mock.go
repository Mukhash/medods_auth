// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/Mukhash/medods_auth/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthService) CreateSession(payload string) (*models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", payload)
	ret0, _ := ret[0].(*models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthServiceMockRecorder) CreateSession(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthService)(nil).CreateSession), payload)
}

// Refresh mocks base method.
func (m *MockAuthService) Refresh(refreshToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthServiceMockRecorder) Refresh(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthService)(nil).Refresh), refreshToken)
}
